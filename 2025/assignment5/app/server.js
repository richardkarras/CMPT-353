'use strict';
const path = require('path');
const express = require("express");
const bodyParser = require("body-parser");
const nano = require("nano")(process.env.COUCHDB_URL || 'http://admin:password@a5cdb1:5984');
const cors = require("cors");

const username = process.env.COUCHDB_USER;
const password = process.env.COUCHDB_PASSWORD;
const port = process.env.PORT || 3000;
let lastUpdateTimestamp = Date.now();

const app = express();
app.use(express.json());
app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

const dbName = "postdb";
const db = nano.use(dbName);
await nano.auth(username, password);

// Initializes postdb
async function initPostDB() {
  try {
    const dbList = await nano.db.list();
    if (!dbList.includes(dbName)) {
      await nano.db.create(dbName);
      console.log(`Database '${dbName}' created.`);
    }
    console.log(`Using database '${dbName}'.`);
  } catch (error) {
    console.error("initPostDB(): ", error);
  }
}
initPostDB();

/*Function to create timeStamp
//No inputs
//Returns YYYY-MM-DD HH:MM:SS Z
*/
function timeStamp() {
  let date = new Date();
  let curr_date = date.getDate();
  let curr_month = date.getMonth() + 1;
  let curr_year = date.getFullYear();
  let curr_hour = date.getHours();
  let curr_min = date.getMinutes();
  let curr_sec = date.getSeconds();
  return `${curr_year}-${curr_month}-${curr_date} ${curr_hour}:${curr_min}:${curr_sec}`;
}

app.get('/', (req,res,next) => {
  res.sendFile('/usr/src/app/nosqldb/public/index.html');
});

app.get("/init", (req, res) => {
  initPostDB();
});

app.get('/lastupdate',(req,res) => {
  res.json({timestamp: lastUpdateTimestamp});
})
//VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVEndpointsVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//
/* postmessage ** POST method **
-input: Accepts {topic,data} from client
-process: Inserts a new post into postDB
-post parameters in postDB
  -_id: unique id generated by CouchDB
  -_type: 'post'
  -topic
  -data
  -timestamp
-Output: returns a JSON response {success: true, id: newPostId}
*/
app.post("/postmessage", async(req, res) => {
  const {topic,data} = req.body;
  if (!topic || !data){
    return res.status(400).json({error: 'Both Topic and data are required',topic,data});
  }
  try {
    const stamp = timeStamp();
    console.log(topic,data,stamp);
    const response = await db.insert({'type': 'post',topic,data,stamp});
    res.json({success: true, id: response.id});
  } catch (error) {
    res.status(500).json({error: error.message});
  }
});

/* postresponse ** POST method **
-input: Accepts parentId and data
-process: Inserts a response into postDB.  Validate that the provided postId exists in the posts table
-response parameters in postDB
  -_id
  -_type: 'response'
  -parentId
  -data
  -timestamp
-output: Returns a JSON response {success: true, id: newResponseId}
*/
app.post("/postresponse", async(req, res) => {
  const {parentId,data} = req.body;
  try {
    const stamp = timeStamp();
    const response = await db.insert({'type': 'response',parentId,data,stamp});
    res.json({success: true, id: response.id});
  } catch (error) {
    res.status(500).json({error: error.message});
  }
});

/* alldata ** GET method **
-purpose: retrieve all posts along with their corresponding responses.
-create CouchDB view to query posts and responses
*/
app.get("/alldata", async (req, res) => {
  try {
    const posts = await db.list({ include_docs: true });
    res.json(posts.rows.map((row) => row.doc));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Endpoints^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//

app.listen(port, function() {
  console.log(`Server listening on port ${port}.`);
});
